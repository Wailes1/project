import json
import os
from typing import List
from .models import Note

class NoteStorage:
    # –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –∑–∞–º–µ—Ç–æ–∫
    # –ó–¥–µ—Å—å –≤—Å—è –ª–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤ JSON —Ñ–∞–π–ª
    def __init__(self, filename: str = "notes.json"):
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
        # –ò–º—è —Ñ–∞–π–ª–∞ –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–∏
        self.filename = filename
        
        # –£–±–µ–∂–¥–∞—é—Å—å —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._ensure_storage_file()
    
    def _ensure_storage_file(self):
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ - —Å–æ–∑–¥–∞—é —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(self.filename):
            # –°–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫
            with open(self.filename, 'w') as f:
                json.dump([], f)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ—Ç–æ–∫: {self.filename}")
    
    def _read_notes(self) -> List[dict]:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ - —á–∏—Ç–∞—é –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        # –í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
        try:
            # –ü—ã—Ç–∞—é—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON
            with open(self.filename, 'r') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω - –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []
    
    def _write_notes(self, notes_data: List[dict]):
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ - –∑–∞–ø–∏—Å—ã–≤–∞—é –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª
        # –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –≤ JSON
        with open(self.filename, 'w') as f:
            # –ò—Å–ø–æ–ª—å–∑—É—é indent=2 –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            json.dump(notes_data, f, indent=2)
    
    def get_all_notes(self) -> List[Note]:
        # –ü–æ–ª—É—á–∞—é –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã Note
        # –ß–∏—Ç–∞—é –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–±—ä–µ–∫—Ç—ã
        # –ß–∏—Ç–∞—é —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        notes_data = self._read_notes()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É—é –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –æ–±—ä–µ–∫—Ç Note
        return [Note.from_dict(note_data) for note_data in notes_data]
    
    def save_note(self, note: Note) -> Note:
        # –°–æ—Ö—Ä–∞–Ω—è—é –æ–¥–Ω—É –∑–∞–º–µ—Ç–∫—É –≤ —Ñ–∞–π–ª
        # –ï—Å–ª–∏ —É –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç ID - –∑–Ω–∞—á–∏—Ç –æ–Ω–∞ –Ω–æ–≤–∞—è
        # –ß–∏—Ç–∞—é —Ç–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        notes_data = self._read_notes()
        
        # –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤–∞—è —ç—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è
        if note.id is None:
            # –≠—Ç–æ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ - –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å ID
            if notes_data:
                # –ù–∞—Ö–æ–∂—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é –Ω–∞ 1
                note.id = max([n['id'] for n in notes_data]) + 1
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ - ID = 1
                note.id = 1
            
            # –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –≤ —Å–ø–∏—Å–æ–∫
            notes_data.append(note.to_dict())
        
        # –°–æ—Ö—Ä–∞–Ω—è—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        self._write_notes(notes_data)
        
        return note
    
    def delete_note(self, note_id: int) -> bool:
        # –£–¥–∞–ª—è—é –∑–∞–º–µ—Ç–∫—É –ø–æ ID
        # –í–æ–∑–≤—Ä–∞—â–∞—é True –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª, False –µ—Å–ª–∏ –Ω–µ –Ω–∞—à—ë–ª
        # –ß–∏—Ç–∞—é —Ç–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏
        notes_data = self._read_notes()
        
        # –ó–∞–ø–æ–º–∏–Ω–∞—é —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞–º–µ—Ç–æ–∫ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        initial_length = len(notes_data)
        
        # –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
        notes_data = [note for note in notes_data if note['id'] != note_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è—é –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–ø–∏—Å–æ–∫
        if len(notes_data) < initial_length:
            # –ï—Å–ª–∏ –¥–∞ - —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self._write_notes(notes_data)
            return True
        
        # –ï—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –∑–Ω–∞—á–∏—Ç –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return False
    
    def search_notes(self, query: str) -> List[Note]:
        # –ò—â—É –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
        # –ü–æ–ª—É—á–∞—é –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
        notes = self.get_all_notes()
        
        # –ü—Ä–∏–≤–æ–∂—É –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        query = query.lower()
        
        # –ò—â—É –∑–∞–º–µ—Ç–∫–∏ –≥–¥–µ –∑–∞–ø—Ä–æ—Å –µ—Å—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ
        return [
            note for note in notes 
            if query in note.title.lower() or query in note.content.lower()
        ]
